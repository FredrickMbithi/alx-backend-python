// Jenkins Pipeline for messaging_app
pipeline {
    agent any

    environment {
        VENV_DIR = 'venv'
        PYTHON = 'python3'
        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
        DOCKERHUB_REPO = 'yourdockerhubuser/messaging_app' // replace with your repo
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source...'
                checkout scm
            }
        }

        stage('Prepare Python') {
            steps {
                echo 'Setting up Python virtualenv and installing dependencies'
                sh '''
                which python3 || python3 --version || true
                python3 -m venv ${VENV_DIR} || python -m venv ${VENV_DIR}
                . ${VENV_DIR}/bin/activate
                pip install --upgrade pip
                if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
                '''
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running pytest and generating junit report'
                sh '''
                . ${VENV_DIR}/bin/activate || true
                pip install pytest pytest-django || true
                mkdir -p reports
                pytest messaging_app/ --junitxml=reports/report.xml || true
                '''
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'reports/report.xml'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image'
                dir('messaging_app') {
                    sh '''
                    IMAGE_TAG=${DOCKERHUB_REPO}:${env.BUILD_NUMBER ?: 'local'}
                    docker build -t ${IMAGE_TAG} .
                    echo "Built ${IMAGE_TAG}"
                    '''
                }
            }
        }

        stage('Push Docker Image') {
            when {
                expression { return env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master' }
            }
            steps {
                echo 'Pushing Docker image to Docker Hub (requires `docker-hub-creds` credential)'
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                    sh '''
                    echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
                    IMAGE_TAG=${DOCKERHUB_REPO}:${env.BUILD_NUMBER ?: 'ci'}
                    docker push ${IMAGE_TAG}
                    docker logout || true
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace'
            sh 'docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" || true'
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed - check logs.'
        }
    }
}
// ==============================================================================
// Jenkins Pipeline for Django Messaging App
// ==============================================================================
// Task: Install Jenkins in Docker, pull code from GitHub, run pytest, generate report
// Solution: Run directly on Jenkins agent (no nested Docker) for compatibility
// ==============================================================================

pipeline {
    agent any
    
    environment {
        VENV_DIR = 'venv'
        PYTHON = 'python3'
        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
        DATABASE_HOST = 'localhost'
        DATABASE_PORT = '3306'
        DATABASE_NAME = 'messaging_db'
        DATABASE_USER = 'messaging_user'
        DATABASE_PASSWORD = 'password'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì¶ Checking out code from GitHub...'
                git branch: 'main',
                    credentialsId: 'github-creds',
                    url: 'https://github.com/FredrickMbithi/alx-backend-python.git'
            }
        }
        
        stage('Verify Environment') {
            steps {
                echo 'ÔøΩ Checking Python and environment...'
                sh '''
                    echo "Python version:"
                    python3 --version || echo "Python3 not found"
                    
                    echo "Pip version:"
                    python3 -m pip --version || echo "Pip not found"
                    
                    echo "Working directory:"
                    pwd
                    ls -la
                '''
            }
        }
        

        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing Python dependencies...'
                dir('messaging_app') {
                    sh '''
                        echo "Installing from requirements.txt..."
                        python3 -m pip install --user -r requirements.txt || echo "Some packages may have failed"
                        
                        echo "Installing test dependencies..."
                        python3 -m pip install --user pytest pytest-django parameterized
                        
                        echo "üìã Installed packages:"
                        python3 -m pip list
                    '''
                }
            }
        }
        

        
        stage('Run Tests') {
            steps {
                echo 'üß™ Running pytest tests...'
                dir('messaging_app') {
                    sh '''
                        echo "Running tests with pytest..."
                        python3 -m pytest chats/ \
                            --junitxml=report.xml \
                            --disable-warnings \
                            --verbose || echo "Tests completed with warnings/failures"
                        
                        echo "‚úÖ Test execution completed"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo 'üìä Publishing test results...'
                // Check if report exists before publishing
                if (fileExists('messaging_app/report.xml')) {
                    junit allowEmptyResults: true, testResults: 'messaging_app/report.xml'
                    echo '‚úÖ Test results published'
                } else {
                    echo '‚ö†Ô∏è No test report found'
                }
            }
        }
        success {
            echo '‚úÖ Pipeline completed successfully! üéâ'
        }
        failure {
            echo '‚ùå Pipeline failed - check logs above'
        }
    }
}

// ALX Backend Python - Task 0: Jenkins Pipeline