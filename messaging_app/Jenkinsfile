pipeline {pipeline {pipeline {pipeline {

    agent any

    agent any

    environment {

        VENV_DIR = 'venv'    agent any    agent any

        PYTHON = 'python3'

        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'    environment {

        DATABASE_HOST = '127.0.0.1'

        DATABASE_PORT = '3306'        VENV_DIR = 'venv'

        DATABASE_NAME = 'messaging_db'

        DATABASE_USER = 'messaging_user'        PYTHON = 'python3'

        DATABASE_PASSWORD = 'password'

    }        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'    environment {    environment {



    stages {        DATABASE_HOST = '127.0.0.1'

        stage('Checkout') {

            steps {        DATABASE_PORT = '3306'        VENV_DIR = 'venv'        // Consistent virtual environment directory

                echo '📦 Checking out code from GitHub...'

                git branch: 'main',        DATABASE_NAME = 'messaging_db'

                    credentialsId: 'github-creds',

                    url: 'https://github.com/FredrickMbithi/alx-backend-python.git'        DATABASE_USER = 'messaging_user'        PYTHON = 'python3'        VENV_DIR = 'venv'

            }

        }        DATABASE_PASSWORD = 'password'



        stage('Install System Dependencies') {    }        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'        PYTHON = 'python3' // fallback alias for Linux

            steps {

                echo '🔧 Installing system packages for mysqlclient...'

                sh '''

                    set -e    stages {                // Ensure pytest-django knows which settings to use

                    if command -v apt-get >/dev/null 2>&1; then

                        echo "Using apt-get (Debian/Ubuntu)..."        stage('Checkout') {

                        export DEBIAN_FRONTEND=noninteractive

                        apt-get update -qq            steps {        // Database configuration for CI        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'

                        apt-get install -y --no-install-recommends \

                            build-essential \                echo '📦 Checking out code from GitHub...'

                            gcc \

                            python3-dev \                git branch: 'main',        DATABASE_HOST = '127.0.0.1'    }

                            pkg-config \

                            default-libmysqlclient-dev                    credentialsId: 'github-creds',

                        echo "✅ System dependencies installed"

                    elif command -v apk >/dev/null 2>&1; then                    url: 'https://github.com/FredrickMbithi/alx-backend-python.git'        DATABASE_PORT = '3306'

                        echo "Using apk (Alpine)..."

                        apk add --no-cache \            }

                            build-base \

                            python3-dev \        }        DATABASE_NAME = 'messaging_db'    stages {

                            pkgconfig \

                            mariadb-connector-c-dev

                        echo "✅ System dependencies installed"

                    elif command -v yum >/dev/null 2>&1; then        stage('Install System Dependencies') {        DATABASE_USER = 'messaging_user'                stage('Install System Dependencies') {

                        echo "Using yum (RHEL/CentOS)..."

                        yum install -y \            steps {

                            gcc \

                            python3-devel \                echo '🔧 Installing system packages for mysqlclient...'        DATABASE_PASSWORD = 'password'                        steps {

                            pkgconfig \

                            mysql-devel                sh '''

                        echo "✅ System dependencies installed"

                    else                    set -e    }                                echo '🧩 Installing OS packages for mysqlclient build...'

                        echo "⚠️ Unknown package manager"

                        exit 1                    if command -v apt-get >/dev/null 2>&1; then

                    fi

                '''                        echo "Using apt-get (Debian/Ubuntu)..."                                script {

            }

        }                        export DEBIAN_FRONTEND=noninteractive



        stage('Setup Python Environment') {                        apt-get update -qq    stages {                                        if (isUnix()) {

            steps {

                echo '🐍 Creating Python virtual environment...'                        apt-get install -y --no-install-recommends \

                dir('messaging_app') {

                    sh '''                            build-essential \        stage('Checkout') {                                                sh '''

                        ${PYTHON} -m venv ${VENV_DIR}

                        . ${VENV_DIR}/bin/activate                            gcc \

                        pip install --upgrade pip setuptools wheel

                        echo "✅ Virtual environment ready"                            python3-dev \            steps {                                                        set -e

                    '''

                }                            pkg-config \

            }

        }                            default-libmysqlclient-dev                echo '📦 Checking out code from GitHub...'                                                        if command -v apt-get >/dev/null 2>&1; then



        stage('Install Python Dependencies') {                        echo "✅ System dependencies installed"

            steps {

                echo '📦 Installing Python packages...'                    elif command -v apk >/dev/null 2>&1; then                git(                                                            echo "Using apt-get..."

                dir('messaging_app') {

                    sh '''                        echo "Using apk (Alpine)..."

                        . ${VENV_DIR}/bin/activate

                                                apk add --no-cache \                    branch: 'main',                                                            sudo -n true 2>/dev/null || true

                        if [ -f requirements.txt ]; then

                            pip install -r requirements.txt                            build-base \

                        else

                            echo "❌ requirements.txt not found"                            python3-dev \                    credentialsId: 'github-creds',                                                            export DEBIAN_FRONTEND=noninteractive

                            exit 1

                        fi                            pkgconfig \

                        

                        pip install --upgrade pytest pytest-django parameterized                            mariadb-connector-c-dev                    url: 'https://github.com/FredrickMbithi/alx-backend-python.git'                                                            apt-get update -y

                        python -c "import MySQLdb; print('✅ mysqlclient OK')"

                        pip freeze                        echo "✅ System dependencies installed"

                    '''

                }                    elif command -v yum >/dev/null 2>&1; then                )                                                            apt-get install -y --no-install-recommends \

            }

        }                        echo "Using yum (RHEL/CentOS)..."



        stage('Start MySQL Container') {                        yum install -y \            }                                                                build-essential \

            steps {

                echo '🐬 Starting MySQL database...'                            gcc \

                sh '''

                    if command -v docker >/dev/null 2>&1; then                            python3-devel \        }                                                                gcc \

                        docker rm -f ci-mysql 2>/dev/null || true

                        docker run -d \                            pkgconfig \

                            --name ci-mysql \

                            -p 3306:3306 \                            mysql-devel                                                                python3-dev \

                            -e MYSQL_DATABASE=${DATABASE_NAME} \

                            -e MYSQL_USER=${DATABASE_USER} \                        echo "✅ System dependencies installed"

                            -e MYSQL_PASSWORD=${DATABASE_PASSWORD} \

                            -e MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD} \                    else        stage('Install System Dependencies') {                                                                pkg-config \

                            --health-cmd='mysqladmin ping -h 127.0.0.1 -uroot -p${DATABASE_PASSWORD}' \

                            --health-interval=5s \                        echo "⚠️ Unknown package manager"

                            --health-timeout=3s \

                            --health-retries=30 \                        exit 1            steps {                                                                default-libmysqlclient-dev

                            mysql:8.0

                                            fi

                        echo "Waiting for MySQL..."

                        for i in $(seq 1 60); do                '''                echo '🔧 Installing system packages required for mysqlclient...'                                                        elif command -v apk >/dev/null 2>&1; then

                            status=$(docker inspect --format='{{.State.Health.Status}}' ci-mysql 2>/dev/null || echo "starting")

                            if [ "$status" = "healthy" ]; then            }

                                echo "✅ MySQL ready"

                                sleep 2        }                sh '''                                                            echo "Using apk..."

                                exit 0

                            fi

                            sleep 2

                        done        stage('Setup Python Environment') {                    set -e                                                            apk add --no-cache \

                        echo "❌ MySQL timeout"

                        exit 1            steps {

                    else

                        echo "⚠️ Docker not available"                echo '🐍 Creating Python virtual environment...'                    if command -v apt-get >/dev/null 2>&1; then                                                                build-base \

                    fi

                '''                dir('messaging_app') {

            }

        }                    sh '''                        echo "📦 Using apt-get (Debian/Ubuntu)..."                                                                python3-dev \



        stage('Run Migrations') {                        ${PYTHON} -m venv ${VENV_DIR}

            steps {

                echo '🛠️ Running Django migrations...'                        . ${VENV_DIR}/bin/activate                        export DEBIAN_FRONTEND=noninteractive                                                                pkgconfig \

                dir('messaging_app') {

                    sh '''                        pip install --upgrade pip setuptools wheel

                        . ${VENV_DIR}/bin/activate

                        python manage.py check --database default                        echo "✅ Virtual environment ready"                        apt-get update -qq                                                                mariadb-connector-c-dev

                        python manage.py migrate --noinput

                        echo "✅ Migrations complete"                    '''

                    '''

                }                }                        apt-get install -y --no-install-recommends \                                                        elif command -v yum >/dev/null 2>&1; then

            }

        }            }



        stage('Run Tests') {        }                            build-essential \                                                            echo "Using yum..."

            steps {

                echo '🧪 Running pytest...'

                dir('messaging_app') {

                    sh '''        stage('Install Python Dependencies') {                            gcc \                                                            yum install -y \

                        . ${VENV_DIR}/bin/activate

                        pytest . \            steps {

                            --junitxml=report.xml \

                            --maxfail=1 \                echo '📦 Installing Python packages...'                            python3-dev \                                                                gcc \

                            --disable-warnings \

                            --verbose                dir('messaging_app') {

                        echo "✅ Tests passed"

                    '''                    sh '''                            pkg-config \                                                                python3-devel \

                }

            }                        . ${VENV_DIR}/bin/activate

        }

    }                                                    default-libmysqlclient-dev                                                                pkgconfig \



    post {                        if [ -f requirements.txt ]; then

        always {

            echo '📊 Publishing test results...'                            pip install -r requirements.txt                        echo "✅ System dependencies installed successfully"                                                                mysql-devel

            junit allowEmptyResults: true, testResults: 'messaging_app/report.xml'

                                    else

            sh '''

                if command -v docker >/dev/null 2>&1; then                            echo "❌ requirements.txt not found"                    elif command -v apk >/dev/null 2>&1; then                                                        else

                    docker rm -f ci-mysql 2>/dev/null || true

                fi                            exit 1

            '''

        }                        fi                        echo "📦 Using apk (Alpine)..."                                                            echo "Unknown package manager. Please ensure MySQL client headers and build tools are present." >&2

        success {

            echo '✅ Pipeline completed successfully! 🎉'                        

        }

        failure {                        pip install --upgrade pytest pytest-django parameterized                        apk add --no-cache \                                                        fi

            echo '❌ Pipeline failed - check logs above'

        }                        python -c "import MySQLdb; print('✅ mysqlclient OK')"

        cleanup {

            cleanWs deleteDirs: true, patterns: [                        pip freeze                            build-base \                                                '''

                [pattern: 'messaging_app/venv/**', type: 'INCLUDE'],

                [pattern: 'messaging_app/**/__pycache__/**', type: 'INCLUDE']                    '''

            ]

        }                }                            python3-dev \                                        } else {

    }

}            }


        }                            pkgconfig \                                                echo 'Skipping OS package install on Windows agent.'



        stage('Start MySQL Container') {                            mariadb-connector-c-dev                                        }

            steps {

                echo '🐬 Starting MySQL database...'                        echo "✅ System dependencies installed successfully"                                }

                sh '''

                    if command -v docker >/dev/null 2>&1; then                    elif command -v yum >/dev/null 2>&1; then                        }

                        docker rm -f ci-mysql 2>/dev/null || true

                        docker run -d \                        echo "📦 Using yum (RHEL/CentOS)..."                }

                            --name ci-mysql \

                            -p 3306:3306 \                        yum install -y \        stage('Checkout') {

                            -e MYSQL_DATABASE=${DATABASE_NAME} \

                            -e MYSQL_USER=${DATABASE_USER} \                            gcc \            steps {

                            -e MYSQL_PASSWORD=${DATABASE_PASSWORD} \

                            -e MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD} \                            python3-devel \                echo '📦 Checking out code from GitHub...'

                            --health-cmd='mysqladmin ping -h 127.0.0.1 -uroot -p${DATABASE_PASSWORD}' \

                            --health-interval=5s \                            pkgconfig \                git(

                            --health-timeout=3s \

                            --health-retries=30 \                            mysql-devel                    branch: 'main',

                            mysql:8.0

                                                echo "✅ System dependencies installed successfully"                    credentialsId: 'github-creds',

                        echo "Waiting for MySQL..."

                        for i in $(seq 1 60); do                    else                    url: 'https://github.com/FredrickMbithi/alx-backend-python.git'

                            status=$(docker inspect --format='{{.State.Health.Status}}' ci-mysql 2>/dev/null || echo "starting")

                            if [ "$status" = "healthy" ]; then                        echo "⚠️  Unknown package manager - ensure MySQL dev headers are installed"                )

                                echo "✅ MySQL ready"

                                sleep 2                        exit 1            }

                                exit 0

                            fi                    fi        }

                            sleep 2

                        done                '''

                        echo "❌ MySQL timeout"

                        exit 1            }        stage('Setup Python Environment') {

                    else

                        echo "⚠️ Docker not available"        }            steps {

                    fi

                '''                echo '🐍 Setting up Python virtual environment...'

            }

        }        stage('Setup Python Environment') {                dir('messaging_app') {



        stage('Run Migrations') {            steps {                    script {

            steps {

                echo '🛠️ Running Django migrations...'                echo '🐍 Setting up Python virtual environment...'                        if (isUnix()) {

                dir('messaging_app') {

                    sh '''                dir('messaging_app') {                            sh '''

                        . ${VENV_DIR}/bin/activate

                        python manage.py check --database default                    sh '''                                echo "Setting up Python venv..."

                        python manage.py migrate --noinput

                        echo "✅ Migrations complete"                        echo "Creating virtual environment..."                                ${PYTHON} -m venv ${VENV_DIR} || python -m venv ${VENV_DIR}

                    '''

                }                        ${PYTHON} -m venv ${VENV_DIR}                                . ${VENV_DIR}/bin/activate

            }

        }                        . ${VENV_DIR}/bin/activate                                pip install --upgrade pip setuptools wheel



        stage('Run Tests') {                                                    '''

            steps {

                echo '🧪 Running pytest...'                        echo "Upgrading pip, setuptools, and wheel..."                        } else {

                dir('messaging_app') {

                    sh '''                        pip install --upgrade pip setuptools wheel                            bat '''

                        . ${VENV_DIR}/bin/activate

                        pytest . \                                                        echo Setting up Python venv...

                            --junitxml=report.xml \

                            --maxfail=1 \                        echo "✅ Virtual environment ready"                                python -m venv %VENV_DIR%

                            --disable-warnings \

                            --verbose                    '''                                call %VENV_DIR%\\Scripts\\activate

                        echo "✅ Tests passed"

                    '''                }                                python -m pip install --upgrade pip setuptools wheel

                }

            }            }                            '''

        }

    }        }                        }



    post {                    }

        always {

            echo '📊 Publishing test results...'        stage('Install Python Dependencies') {                }

            junit allowEmptyResults: true, testResults: 'messaging_app/report.xml'

                        steps {            }

            sh '''

                if command -v docker >/dev/null 2>&1; then                echo '📦 Installing Python packages from requirements.txt...'        }

                    docker rm -f ci-mysql 2>/dev/null || true

                fi                dir('messaging_app') {

            '''

        }                    sh '''        stage('Install Dependencies') {

        success {

            echo '✅ Pipeline completed successfully! 🎉'                        . ${VENV_DIR}/bin/activate            steps {

        }

        failure {                                        echo '📦 Installing dependencies...'

            echo '❌ Pipeline failed - check logs above'

        }                        if [ -f requirements.txt ]; then                dir('messaging_app') {

        cleanup {

            cleanWs deleteDirs: true, patterns: [                            echo "Installing from requirements.txt..."                    script {

                [pattern: 'messaging_app/venv/**', type: 'INCLUDE'],

                [pattern: 'messaging_app/**/__pycache__/**', type: 'INCLUDE']                            pip install -r requirements.txt                        if (isUnix()) {

            ]

        }                        else                            sh '''

    }

}                            echo "❌ requirements.txt not found!"                                . ${VENV_DIR}/bin/activate


                            exit 1                                if [ -f requirements.txt ]; then

                        fi                                    echo "Installing from requirements.txt..."

                                                            pip install -r requirements.txt

                        # Ensure critical test dependencies are present                                else

                        echo "Installing test dependencies..."                                    echo "⚠️ No requirements.txt found!"

                        pip install --upgrade pytest pytest-django parameterized                                fi

                                                        # Ensure test tooling is present even if not in requirements

                        # Verify mysqlclient installation                                pip install --upgrade pytest pytest-django parameterized django-filter drf-nested-routers

                        echo "Verifying mysqlclient..."                                # Sanity check MySQL client

                        python -c "import MySQLdb; print('✅ mysqlclient installed successfully')"                                python - <<'PY'

                        import sys

                        echo "📋 Installed packages:"try:

                        pip freeze    import MySQLdb

                    '''    print('mysqlclient import OK')

                }except Exception as e:

            }    print('mysqlclient import failed:', e)

        }    sys.exit(1)

PY

        stage('Start MySQL Container') {                                pip freeze

            steps {                            '''

                echo '🐬 Starting MySQL database container...'                        } else {

                sh '''                            bat '''

                    set -e                                call %VENV_DIR%\\Scripts\\activate

                                                    if exist requirements.txt (

                    # Check if Docker is available                                    echo Installing from requirements.txt...

                    if ! command -v docker >/dev/null 2>&1; then                                    pip install -r requirements.txt

                        echo "⚠️  Docker not available - assuming external MySQL"                                ) else (

                        exit 0                                    echo ⚠️ No requirements.txt found!

                    fi                                )

                                                    rem Ensure test tooling is present even if not in requirements

                    echo "Removing any existing ci-mysql container..."                                pip install --upgrade pytest pytest-django parameterized django-filter drf-nested-routers

                    docker rm -f ci-mysql 2>/dev/null || true                                pip freeze

                                                '''

                    echo "Starting MySQL 8.0 container..."                        }

                    docker run -d \                    }

                        --name ci-mysql \                }

                        -p 3306:3306 \            }

                        -e MYSQL_DATABASE=${DATABASE_NAME} \        }

                        -e MYSQL_USER=${DATABASE_USER} \

                        -e MYSQL_PASSWORD=${DATABASE_PASSWORD} \        stage('Start MySQL (if Docker available)') {

                        -e MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD} \            when {

                        --health-cmd='mysqladmin ping -h 127.0.0.1 -uroot -p${DATABASE_PASSWORD}' \                expression { return isUnix() }

                        --health-interval=5s \            }

                        --health-timeout=3s \            steps {

                        --health-retries=30 \                echo '🐬 Ensuring a MySQL service is available for migrations/tests...'

                        mysql:8.0                script {

                                        sh '''

                    echo "Waiting for MySQL to be healthy..."                        set -e

                    for i in $(seq 1 60); do                        if command -v docker >/dev/null 2>&1; then

                        status=$(docker inspect --format='{{.State.Health.Status}}' ci-mysql 2>/dev/null || echo "starting")                          echo "Docker detected. Starting MySQL test container..."

                        echo "MySQL status: $status (attempt $i/60)"                          # Remove any previous container with same name

                                                  docker rm -f ci-mysql >/dev/null 2>&1 || true

                        if [ "$status" = "healthy" ]; then                          docker run -d --name ci-mysql -p 3306:3306 \

                            echo "✅ MySQL is ready!"                            -e MYSQL_DATABASE=messaging_db \

                            sleep 2  # Extra buffer for connection stability                            -e MYSQL_USER=messaging_user \

                            exit 0                            -e MYSQL_PASSWORD=password \

                        fi                            -e MYSQL_ROOT_PASSWORD=password \

                                                    --health-cmd='mysqladmin ping -h 127.0.0.1 -uroot -ppassword' \

                        sleep 2                            --health-interval=5s --health-timeout=3s --health-retries=20 \

                    done                            mysql:8.0

                                              echo "Waiting for MySQL to be healthy..."

                    echo "❌ MySQL failed to become healthy"                          for i in $(seq 1 40); do

                    docker logs ci-mysql                            status=$(docker inspect --format='{{json .State.Health.Status}}' ci-mysql | tr -d '"')

                    exit 1                            if [ "$status" = "healthy" ]; then

                '''                              echo "MySQL is healthy."

            }                              break

        }                            fi

                            sleep 3

        stage('Run Database Migrations') {                          done

            steps {                        else

                echo '🛠️  Running Django database migrations...'                          echo "Docker not available; assuming an external MySQL is reachable via env vars."

                dir('messaging_app') {                        fi

                    sh '''                    '''

                        . ${VENV_DIR}/bin/activate                }

                                    }

                        echo "Checking database connectivity..."        }

                        python manage.py check --database default

                                stage('Run Migrations') {

                        echo "Running migrations..."            steps {

                        python manage.py migrate --noinput                echo '🛠 Running Django migrations...'

                                        dir('messaging_app') {

                        echo "✅ Migrations completed successfully"                    script {

                    '''                        if (isUnix()) {

                }                            sh """

            }                                . ${VENV_DIR}/bin/activate

        }                                export DATABASE_HOST=127.0.0.1

                                export DATABASE_PORT=3306

        stage('Run Tests') {                                export DATABASE_NAME=messaging_db

            steps {                                export DATABASE_USER=messaging_user

                echo '🧪 Running pytest test suite...'                                export DATABASE_PASSWORD=password

                dir('messaging_app') {                                python manage.py migrate --noinput || echo 'No migrations to apply.'

                    sh '''                            """

                        . ${VENV_DIR}/bin/activate                        } else {

                                                    bat """

                        echo "Running tests with pytest..."                                call %VENV_DIR%\\Scripts\\activate

                        pytest . \                                python manage.py migrate --noinput || echo No migrations to apply.

                            --junitxml=report.xml \                            """

                            --maxfail=1 \                        }

                            --disable-warnings \                    }

                            --verbose \                }

                            --tb=short            }

                                }

                        echo "✅ All tests passed!"

                    '''        stage('Run Tests') {

                }            steps {

            }                echo '🧪 Running unit tests...'

        }                dir('messaging_app') {

    }                    script {

                        if (isUnix()) {

    post {                            sh """

        always {                                . ${VENV_DIR}/bin/activate

            echo '📊 Publishing test results...'                                export DATABASE_HOST=127.0.0.1

            junit allowEmptyResults: true, testResults: 'messaging_app/report.xml'                                export DATABASE_PORT=3306

                                            export DATABASE_NAME=messaging_db

            script {                                export DATABASE_USER=messaging_user

                // Cleanup MySQL container if it exists                                export DATABASE_PASSWORD=password

                sh '''                                # Limit test discovery to this Django project to avoid unrelated repo tests

                    if command -v docker >/dev/null 2>&1; then                                pytest . --junitxml=report.xml --maxfail=1 --disable-warnings -v

                        echo "🧹 Cleaning up MySQL container..."                            """

                        docker rm -f ci-mysql 2>/dev/null || true                        } else {

                    fi                            bat """

                '''                                call %VENV_DIR%\\Scripts\\activate

            }                                rem Limit test discovery to this Django project to avoid unrelated repo tests

        }                                pytest . --junitxml=report.xml --maxfail=1 --disable-warnings -v

        success {                            """

            echo '✅ Pipeline completed successfully! All stages passed. 🎉'                        }

        }                    }

        failure {                }

            echo '❌ Pipeline failed. Review the logs above to identify the issue.'            }

        }        }

        cleanup {    }

            echo '🧹 Cleaning up workspace...'

            cleanWs(    post {

                deleteDirs: true,        always {

                patterns: [            echo '📊 Publishing test results...'

                    [pattern: 'messaging_app/venv/**', type: 'INCLUDE'],            // Report is generated inside messaging_app

                    [pattern: 'messaging_app/**/__pycache__/**', type: 'INCLUDE'],            junit 'messaging_app/report.xml'

                    [pattern: 'messaging_app/.pytest_cache/**', type: 'INCLUDE']        }

                ]        success {

            )            echo '✅ Pipeline completed successfully! Everything is working as expected.'

        }        }

    }        failure {

}            echo '❌ Pipeline failed. Check logs and fix issues before re-running.'

        }
    }
}
