pipeline {
    agent any
    
    environment {
        VENV_DIR = 'venv'
        PYTHON = 'python3'
        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
        DATABASE_HOST = '127.0.0.1'
        DATABASE_PORT = '3306'
        DATABASE_NAME = 'messaging_db'
        DATABASE_USER = 'messaging_user'
        DATABASE_PASSWORD = 'password'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo '📦 Checking out code from GitHub...'
                git branch: 'main',
                    credentialsId: 'github-creds',
                    url: 'https://github.com/FredrickMbithi/alx-backend-python.git'
            }
        }
        
        stage('Install System Dependencies') {
            steps {
                echo '🔧 Installing system packages for mysqlclient...'
                sh '''
                    if command -v apt-get >/dev/null 2>&1; then
                        export DEBIAN_FRONTEND=noninteractive
                        # Try with sudo first, fallback to direct install
                        if command -v sudo >/dev/null 2>&1 && sudo -n true 2>/dev/null; then
                            sudo apt-get update -qq
                            sudo apt-get install -y --no-install-recommends \
                                build-essential \
                                gcc \
                                python3-dev \
                                pkg-config \
                                default-libmysqlclient-dev
                        else
                            # Running as root or sudo not available - install directly
                            apt-get update -qq
                            apt-get install -y --no-install-recommends \
                                build-essential \
                                gcc \
                                python3-dev \
                                pkg-config \
                                default-libmysqlclient-dev
                        fi
                        echo "✅ System dependencies installed"
                    elif command -v apk >/dev/null 2>&1; then
                        apk add --no-cache \
                            build-base \
                            python3-dev \
                            pkgconfig \
                            mariadb-connector-c-dev
                        echo "✅ System dependencies installed"
                    else
                        echo "⚠️ Unknown package manager - cannot install system deps"
                    fi
                '''
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                echo '🐍 Creating Python virtual environment...'
                dir('messaging_app') {
                    sh '''
                        ${PYTHON} -m venv ${VENV_DIR}
                        . ${VENV_DIR}/bin/activate
                        pip install --upgrade pip setuptools wheel
                    '''
                }
            }
        }
        
        stage('Install Python Dependencies') {
            steps {
                echo '📦 Installing Python packages...'
                dir('messaging_app') {
                    sh '''
                        . ${VENV_DIR}/bin/activate
                        
                        if [ -f requirements.txt ]; then
                            echo "Installing from requirements.txt..."
                            pip install -r requirements.txt
                        else
                            echo "⚠️ No requirements.txt found, installing basic deps"
                            pip install Django pytest pytest-django
                        fi
                        
                        # Ensure test dependencies are present
                        echo "Installing test dependencies..."
                        pip install --upgrade pytest pytest-django parameterized
                        
                        # Verify mysqlclient was installed successfully
                        echo "Verifying mysqlclient installation..."
                        python -c "import MySQLdb; print('✅ mysqlclient imported successfully')" || echo "⚠️ mysqlclient not available"
                        
                        echo "📋 Installed packages:"
                        pip freeze
                    '''
                }
            }
        }
        
        stage('Start MySQL Container') {
            steps {
                echo '🐬 Starting MySQL database...'
                sh '''
                    if command -v docker >/dev/null 2>&1; then
                        echo "Cleaning up any existing MySQL container..."
                        docker rm -f ci-mysql 2>/dev/null || true
                        
                        echo "Starting MySQL 8.0 container..."
                        docker run -d \
                            --name ci-mysql \
                            -p 3306:3306 \
                            -e MYSQL_DATABASE=${DATABASE_NAME} \
                            -e MYSQL_USER=${DATABASE_USER} \
                            -e MYSQL_PASSWORD=${DATABASE_PASSWORD} \
                            -e MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD} \
                            --health-cmd="mysqladmin ping -h 127.0.0.1 -u\${MYSQL_USER} -p\${MYSQL_PASSWORD}" \
                            --health-interval=5s \
                            --health-timeout=3s \
                            --health-retries=30 \
                            mysql:8.0
                        
                        echo "Waiting for MySQL to be healthy..."
                        for i in $(seq 1 60); do
                            status=$(docker inspect --format='{{.State.Health.Status}}' ci-mysql 2>/dev/null || echo "starting")
                            echo "Attempt $i/60: MySQL status = $status"
                            
                            if [ "$status" = "healthy" ]; then
                                echo "✅ MySQL is ready and healthy!"
                                sleep 3
                                exit 0
                            fi
                            sleep 3
                        done
                        
                        echo "❌ MySQL failed to become healthy within timeout"
                        docker logs ci-mysql
                        exit 1
                    else
                        echo "⚠️ Docker not available - skipping MySQL container setup"
                        echo "Tests may fail if MySQL is required"
                    fi
                '''
            }
        }
        
        stage('Run Migrations') {
            steps {
                echo '🛠️ Running Django migrations...'
                dir('messaging_app') {
                    sh '''
                        . ${VENV_DIR}/bin/activate
                        
                        echo "Checking database connectivity..."
                        python manage.py check --database default || echo "⚠️ Database check failed"
                        
                        echo "Running migrations..."
                        python manage.py migrate --noinput
                        
                        echo "✅ Migrations completed"
                    '''
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                echo '🧪 Running pytest test suite...'
                dir('messaging_app') {
                    sh '''
                        . ${VENV_DIR}/bin/activate
                        
                        echo "Running tests with pytest..."
                        pytest . \
                            --junitxml=report.xml \
                            --maxfail=1 \
                            --disable-warnings \
                            --verbose \
                            --tb=short
                        
                        echo "✅ All tests passed!"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo '📊 Publishing test results...'
            junit allowEmptyResults: true, testResults: 'messaging_app/report.xml'
            
            script {
                sh '''
                    if command -v docker >/dev/null 2>&1; then
                        echo "🧹 Cleaning up MySQL container..."
                        docker rm -f ci-mysql 2>/dev/null || true
                        echo "✅ Cleanup complete"
                    fi
                '''
            }
        }
        success {
            echo '✅ Pipeline completed successfully! All stages passed. 🎉'
        }
        failure {
            echo '❌ Pipeline failed - review the logs above to identify the issue'
        }
        cleanup {
            echo '🧹 Cleaning up workspace artifacts...'
            cleanWs deleteDirs: true, patterns: [
                [pattern: 'messaging_app/venv/**', type: 'INCLUDE'],
                [pattern: 'messaging_app/**/__pycache__/**', type: 'INCLUDE'],
                [pattern: 'messaging_app/.pytest_cache/**', type: 'INCLUDE']
            ]
        }
    }
}