pipeline {
    agent any
    
    environment {
        VENV_DIR = 'venv'
        PYTHON = 'python3'
        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
        DATABASE_HOST = '127.0.0.1'
        DATABASE_PORT = '3306'
        DATABASE_NAME = 'messaging_db'
        DATABASE_USER = 'messaging_user'
        DATABASE_PASSWORD = 'password'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo '📦 Checking out code from GitHub...'
                git branch: 'main',
                    credentialsId: 'github-creds',
                    url: 'https://github.com/FredrickMbithi/alx-backend-python.git'
            }
        }
        
        stage('Install System Dependencies') {
            steps {
                echo '🔧 Installing system packages for mysqlclient...'
                sh '''
                    if command -v apt-get >/dev/null 2>&1; then
                        export DEBIAN_FRONTEND=noninteractive
                        sudo apt-get update -qq || true
                        sudo apt-get install -y --no-install-recommends \
                            build-essential \
                            gcc \
                            python3-dev \
                            pkg-config \
                            default-libmysqlclient-dev || echo "Could not install system packages"
                    fi
                '''
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                echo '🐍 Creating Python virtual environment...'
                dir('messaging_app') {
                    sh '''
                        ${PYTHON} -m venv ${VENV_DIR}
                        . ${VENV_DIR}/bin/activate
                        pip install --upgrade pip setuptools wheel
                    '''
                }
            }
        }
        
        stage('Install Python Dependencies') {
            steps {
                echo '📦 Installing Python packages...'
                dir('messaging_app') {
                    sh '''
                        . ${VENV_DIR}/bin/activate
                        
                        if [ -f requirements.txt ]; then
                            pip install -r requirements.txt
                        else
                            echo "No requirements.txt found, installing basic deps"
                            pip install Django pytest pytest-django
                        fi
                        
                        pip install --upgrade pytest pytest-django parameterized
                        pip freeze
                    '''
                }
            }
        }
        
        stage('Start MySQL Container') {
            steps {
                echo '🐬 Starting MySQL database...'
                sh '''
                    if command -v docker >/dev/null 2>&1; then
                        docker rm -f ci-mysql 2>/dev/null || true
                        
                        docker run -d \
                            --name ci-mysql \
                            -p 3306:3306 \
                            -e MYSQL_DATABASE=${DATABASE_NAME} \
                            -e MYSQL_USER=${DATABASE_USER} \
                            -e MYSQL_PASSWORD=${DATABASE_PASSWORD} \
                            -e MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD} \
                            --health-cmd='mysqladmin ping -h 127.0.0.1 -uroot -ppassword' \
                            --health-interval=5s \
                            --health-timeout=3s \
                            --health-retries=30 \
                            mysql:8.0
                        
                        echo "Waiting for MySQL to be ready..."
                        for i in $(seq 1 60); do
                            status=$(docker inspect --format='{{.State.Health.Status}}' ci-mysql 2>/dev/null || echo "starting")
                            if [ "$status" = "healthy" ]; then
                                echo "✅ MySQL is ready"
                                sleep 2
                                exit 0
                            fi
                            sleep 2
                        done
                        echo "❌ MySQL failed to start"
                        exit 1
                    else
                        echo "⚠️ Docker not available - skipping MySQL"
                    fi
                '''
            }
        }
        
        stage('Run Migrations') {
            steps {
                echo '🛠️ Running Django migrations...'
                dir('messaging_app') {
                    sh '''
                        . ${VENV_DIR}/bin/activate
                        python manage.py migrate --noinput || echo "Migrations skipped"
                    '''
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                echo '🧪 Running pytest...'
                dir('messaging_app') {
                    sh '''
                        . ${VENV_DIR}/bin/activate
                        pytest . \
                            --junitxml=report.xml \
                            --maxfail=1 \
                            --disable-warnings \
                            --verbose || echo "No tests found yet"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo '📊 Publishing test results...'
            junit allowEmptyResults: true, testResults: 'messaging_app/report.xml'
            
            sh '''
                if command -v docker >/dev/null 2>&1; then
                    docker rm -f ci-mysql 2>/dev/null || true
                fi
            '''
        }
        success {
            echo '✅ Pipeline completed successfully! 🎉'
        }
        failure {
            echo '❌ Pipeline failed - check logs above'
        }
    }
}