// Jenkins Pipeline for messaging_app
pipeline {
    agent any

    environment {
        VENV_DIR = 'venv'
        PYTHON = 'python3'
        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
        DOCKERHUB_REPO = 'yourdockerhubuser/messaging_app' // replace with your repo
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source...'
                checkout scm
            }
        }

        stage('Prepare Python') {
            steps {
                echo 'Setting up Python virtualenv and installing dependencies'
                sh '''
                which python3 || python3 --version || true
                python3 -m venv ${VENV_DIR} || python -m venv ${VENV_DIR}
                . ${VENV_DIR}/bin/activate
                pip install --upgrade pip
                if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
                '''
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running pytest and generating junit report'
                sh '''
                . ${VENV_DIR}/bin/activate || true
                pip install pytest pytest-django || true
                mkdir -p reports
                pytest messaging_app/ --junitxml=reports/report.xml || true
                '''
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'reports/report.xml'
                }
            }
        // Jenkins Pipeline for messaging_app
        pipeline {
            agent any

            environment {
                VENV_DIR = 'venv'
                PYTHON = 'python3'
                DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
                DOCKERHUB_REPO = 'yourdockerhubuser/messaging_app' // replace with your repo
            }

            stages {
                stage('Checkout') {
                    steps {
                        echo 'Checking out source...'
                        // Use checkout scm for Jenkins job that is connected to repo
                        checkout scm
                    }
                }

                stage('Verify Environment') {
                    steps {
                        echo 'Checking Python and environment...'
                        sh '''
                        echo "Python version:"
                        python3 --version || python --version || true
                        echo "Pip version:"
                        python3 -m pip --version || python -m pip --version || true
                        pwd
                        ls -la
                        '''
                    }
                }

                stage('Install Dependencies') {
                    steps {
                        echo 'Installing Python dependencies'
                        sh '''
                        python3 -m venv ${VENV_DIR} || python -m venv ${VENV_DIR} || true
                        . ${VENV_DIR}/bin/activate || true
                        pip install --upgrade pip || true
                        if [ -f messaging_app/requirements.txt ]; then pip install -r messaging_app/requirements.txt || true; fi
                        pip install pytest pytest-django || true
                        '''
                    }
                }

                stage('Run Tests') {
                    steps {
                        echo 'Running pytest and generating junit report'
                        sh '''
                        . ${VENV_DIR}/bin/activate || true
                        mkdir -p reports
                        pytest messaging_app/ --junitxml=reports/report.xml || true
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/report.xml'
                        }
                    }
                }

                stage('Build Docker Image') {
                    steps {
                        echo 'Building Docker image'
                        dir('messaging_app') {
                            sh '''
                            IMAGE_TAG=${DOCKERHUB_REPO}:${env.BUILD_NUMBER ?: 'local'}
                            docker build -t ${IMAGE_TAG} . || true
                            echo "Built ${IMAGE_TAG}"
                            '''
                        }
                    }
                }

                stage('Push Docker Image') {
                    when {
                        expression { return env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master' }
                    }
                    steps {
                        echo 'Pushing Docker image to Docker Hub (requires `docker-hub-creds` credential)'
                        withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                            sh '''
                            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin || true
                            IMAGE_TAG=${DOCKERHUB_REPO}:${env.BUILD_NUMBER ?: 'ci'}
                            docker push ${IMAGE_TAG} || true
                            docker logout || true
                            '''
                        }
                    }
                }
            }

            post {
                always {
                    echo 'Cleaning up workspace'
                    sh 'docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" || true'
                }
                success {
                    echo 'Pipeline completed successfully.'
                }
                failure {
                    echo 'Pipeline failed - check logs.'
                }
            }
        }
