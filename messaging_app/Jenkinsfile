pipeline {
    agent any

    environment {
        // Consistent virtual environment directory
        VENV_DIR = 'venv'
        PYTHON = 'python3' // fallback alias for Linux
        // Ensure pytest-django knows which settings to use
        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì¶ Checking out code from GitHub...'
                git(
                    branch: 'main',
                    credentialsId: 'github-creds',
                    url: 'https://github.com/FredrickMbithi/alx-backend-python.git'
                )
            }
        }

        stage('Setup Python Environment') {
            steps {
                echo 'üêç Setting up Python virtual environment...'
                dir('messaging_app') {
                    script {
                        if (isUnix()) {
                            sh '''
                                echo "Setting up Python venv..."
                                ${PYTHON} -m venv ${VENV_DIR} || python -m venv ${VENV_DIR}
                                . ${VENV_DIR}/bin/activate
                                pip install --upgrade pip setuptools wheel
                            '''
                        } else {
                            bat '''
                                echo Setting up Python venv...
                                python -m venv %VENV_DIR%
                                call %VENV_DIR%\\Scripts\\activate
                                python -m pip install --upgrade pip setuptools wheel
                            '''
                        }
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing dependencies...'
                dir('messaging_app') {
                    script {
                        if (isUnix()) {
                            sh '''
                                . ${VENV_DIR}/bin/activate
                                if [ -f requirements.txt ]; then
                                    echo "Installing from requirements.txt..."
                                    pip install -r requirements.txt
                                else
                                    echo "‚ö†Ô∏è No requirements.txt found!"
                                fi
                                # Ensure test tooling is present even if not in requirements
                                pip install --upgrade pytest pytest-django parameterized django-filter drf-nested-routers
                                pip freeze
                            '''
                        } else {
                            bat '''
                                call %VENV_DIR%\\Scripts\\activate
                                if exist requirements.txt (
                                    echo Installing from requirements.txt...
                                    pip install -r requirements.txt
                                ) else (
                                    echo ‚ö†Ô∏è No requirements.txt found!
                                )
                                rem Ensure test tooling is present even if not in requirements
                                pip install --upgrade pytest pytest-django parameterized django-filter drf-nested-routers
                                pip freeze
                            '''
                        }
                    }
                }
            }
        }

        stage('Run Migrations') {
            steps {
                echo 'üõ† Running Django migrations...'
                dir('messaging_app') {
                    script {
                        if (isUnix()) {
                            sh """
                                . ${VENV_DIR}/bin/activate
                                python manage.py migrate --noinput || echo 'No migrations to apply.'
                            """
                        } else {
                            bat """
                                call %VENV_DIR%\\Scripts\\activate
                                python manage.py migrate --noinput || echo No migrations to apply.
                            """
                        }
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                echo 'üß™ Running unit tests...'
                dir('messaging_app') {
                    script {
                        if (isUnix()) {
                            sh """
                                . ${VENV_DIR}/bin/activate
                                # Limit test discovery to this Django project to avoid unrelated repo tests
                                pytest . --junitxml=report.xml --maxfail=1 --disable-warnings -v
                            """
                        } else {
                            bat """
                                call %VENV_DIR%\\Scripts\\activate
                                rem Limit test discovery to this Django project to avoid unrelated repo tests
                                pytest . --junitxml=report.xml --maxfail=1 --disable-warnings -v
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üìä Publishing test results...'
            // Report is generated inside messaging_app
            junit 'messaging_app/report.xml'
        }
        success {
            echo '‚úÖ Pipeline completed successfully! Everything is working as expected.'
        }
        failure {
            echo '‚ùå Pipeline failed. Check logs and fix issues before re-running.'
        }
    }
}
