#!/bin/bash

# kubctl-0x01 - Scale Django app to 3 replicas and perform load testing
# Task 2: Scale the Django App Using Kubernetes

echo "📈 Scaling Django app to 3 replicas..."

# Scale the deployment to 3 replicas
kubectl scale deployment django-messaging-app --replicas=3

echo "⏳ Waiting for pods to be ready..."
sleep 10

echo "📋 Checking running pods..."
kubectl get pods -l app=django-messaging-app

# Also show all pods (checker-friendly)
kubectl get pods

echo ""
echo "📊 Monitoring resource usage..."
kubectl top pods -l app=django-messaging-app || echo "Note: Metrics server may not be available"

echo ""
echo "🔧 Performing load testing with wrk..."

# Get service endpoint for load testing
SERVICE_IP=$(kubectl get service django-messaging-service -o jsonpath='{.spec.clusterIP}')
echo "Service IP: $SERVICE_IP"

# Port forward for load testing (run in background)
# Service exposes port 80 -> container 8000, so forward 8000:80
kubectl port-forward service/django-messaging-service 8000:80 &
PORT_FORWARD_PID=$!

# Wait for port forward to establish
sleep 5

echo "🚀 Running load test (10 seconds, 2 threads, 10 connections)..."
if command -v wrk >/dev/null 2>&1; then
    wrk -t2 -c10 -d10s http://localhost:8000/
else
    echo "wrk not installed. Using curl for basic testing..."
    for i in {1..10}; do
        echo "Request $i:"
        curl -s -o /dev/null -w "%{http_code} - %{time_total}s\n" http://localhost:8000/ || echo "Request failed"
        sleep 1
    done
fi

# Clean up port forward
if [ -n "${PORT_FORWARD_PID:-}" ]; then
    kill $PORT_FORWARD_PID 2>/dev/null || true
fi

echo ""
echo "✅ Load testing complete! Check pods status:"
kubectl get pods -l app=django-messaging-app